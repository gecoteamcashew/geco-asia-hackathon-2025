# chatbot_app.py
# One assistant, two personas:
# - Clarity (staff analytics) for sales/data/analytics queries
# - Nibbles (customer support) for everything else
#
# Features
# - Dynamic CSV ingestion (recursive), tolerant encodings, normalized columns
# - FAQ & catalogue lookup (faq/faqs + any product-ish table)
# - Sales analytics: totals, top/bottom N, year filters (simple, robust)
# - LLM fallback with persona-aware system prompts (optional via API_URL/API_KEY)
# - Minimal web UI (single-file), no prefix needed to switch modes

import os, re, sys, json, logging, subprocess
from pathlib import Path
from string import Template
from typing import Dict, List, Optional

# -----------------------------
# Logging
# -----------------------------
logging.basicConfig(level=logging.INFO, format="%(message)s")
log = logging.getLogger("chatbot")

# -----------------------------
# Dependencies
# -----------------------------
REQUIRED = [
    "flask", "pandas", "fuzzywuzzy", "python-levenshtein",
    "requests", "openpyxl", "python-dotenv"
]
def ensure_deps():
    import importlib
    missing=[]
    for pkg in REQUIRED:
        mod = "Levenshtein" if pkg=="python-levenshtein" else pkg
        try: importlib.import_module(mod)
        except ImportError: missing.append(pkg)
    if missing:
        subprocess.check_call([sys.executable, "-m", "pip", "install", *missing])
ensure_deps()

import pandas as pd
from flask import Flask, request, jsonify, render_template_string
from fuzzywuzzy import fuzz
import requests
from dotenv import load_dotenv

# -----------------------------
# Env
# -----------------------------
load_dotenv()

API_URL   = (os.getenv("API_URL") or "").strip()
API_KEY   = (os.getenv("API_KEY") or "").strip()
MODEL     = (os.getenv("MODEL") or "openai/gpt-oss-120b").strip()
DATA_DIR  = Path(os.getenv("DATA_DIR", r"C:\Team_Cashew_Synthetic_Data"))
COMPANY   = (os.getenv("COMPANY_NAME") or "Camel Nuts").strip()

ASSISTANT_NAME_CUSTOMER = "Nibbles"
ASSISTANT_NAME_STAFF    = "Clarity"

# -----------------------------
# Helpers
# -----------------------------
ANALYTICS_KEYWORDS = (
    "sale", "sales", "revenue", "net sales", "gross", "amount", "orders",
    "transactions", "sku", "inventory", "top ", "bottom ", "trend", "quarter",
    "q1", "q2", "q3", "q4", "half", "h1", "h2", "roi", "roas", "ltv",
    "cohort", "retention", "forecast", "campaign", "marketing", "spend"
)
YEAR_PAT = re.compile(r"\b(20\d{2})\b")

def is_analytics_query(q: str) -> bool:
    ql = q.lower()
    if any(k in ql for k in ANALYTICS_KEYWORDS):
        return True
    # ranges like "from 2022 to 2024"
    if re.search(r"\bfrom\s+20\d{2}\s+(?:to|-|–)\s+20\d{2}\b", ql):
        return True
    # contains at least one year + a quantitative verb
    if YEAR_PAT.search(ql) and any(w in ql for w in ("top", "bottom", "total", "sum", "trend")):
        return True
    return False

def call_model(messages: List[Dict[str, str]], max_tokens=512) -> str:
    if not (API_URL and API_KEY):
        return "API not configured. Please check your .env file."
    try:
        # Force plaintext output
        sysmsg = {"role":"system","content":"Always answer in plain text only. Do not use Markdown, bold, tables, or special formatting."}
        r = requests.post(
            API_URL,
            headers={"Authorization": f"Bearer {API_KEY}", "Content-Type":"application/json"},
            json={"model": MODEL, "messages":[sysmsg]+messages, "max_tokens": max_tokens},
            timeout=20
        )
        reply = r.json()["choices"][0]["message"]["content"].strip()
        return re.sub(r"[*_`#>|]", "", reply)
    except Exception as e:
        log.error(f"[api] error: {e}")
        return "Sorry, I couldn’t connect to the assistant API."

# -----------------------------
# Data Manager (dynamic CSV loader)
# -----------------------------
class DataManager:
    def __init__(self, data_dir: Path):
        self.dir = Path(data_dir)
        self.tables: Dict[str, pd.DataFrame] = {}
        self._load_all()

    def _safe_csv(self, path: Path) -> pd.DataFrame:
        df = pd.DataFrame()
        for enc in ("utf-8", "utf-8-sig", "latin-1"):
            try:
                df = pd.read_csv(path, encoding=enc, low_memory=False)
                break
            except Exception:
                continue
        if df.empty:
            log.warning(f"[csv] Failed to load {path}")
            return df
        # Normalize columns/strings
        df.columns = [str(c).replace("\u00A0"," ").strip().lower() for c in df.columns]
        for c in df.columns:
            if df[c].dtype == object:
                df[c] = df[c].astype(str).str.replace("\u00A0"," ", regex=False).str.strip()
        return df

    def _load_all(self):
        log.info(f"[load] scanning {self.dir} for CSV files…")
        if not self.dir.exists():
            log.error(f"[load] directory not found: {self.dir}")
            return
        for path in self.dir.rglob("*.csv"):
            key = path.stem.lower().replace(" ","_")
            df  = self._safe_csv(path)
            self.tables[key] = df
            log.info(f"[load] {key}: {len(df)} rows, {len(df.columns)} cols")

# -----------------------------
# Nibbles (customer-mode) tools
# -----------------------------
class CustomerTools:
    def __init__(self, dm: DataManager):
        self.dm = dm

    def faq_lookup(self, q: str) -> str:
        faq = self.dm.tables.get("faqs") or self.dm.tables.get("faq")
        if not isinstance(faq, pd.DataFrame) or faq.empty or not {"question","answer"} <= set(faq.columns):
            return ""
        best, score = None, 0
        for _, row in faq.iterrows():
            s = fuzz.token_set_ratio(str(row["question"]), q)
            if s > score:
                best, score = str(row["answer"]), s
        return best if score >= 75 else ""

    def product_lookup(self, q: str, limit: int = 10) -> str:
        # gather product-like tables
        cands = []
        for name in ("sku_master","product_inventory","products","catalog"):
            df = self.dm.tables.get(name)
            if isinstance(df, pd.DataFrame) and not df.empty:
                cands.append(df)
        if not cands:
            for _, df in self.dm.tables.items():
                if isinstance(df, pd.DataFrame) and any(re.search(r"(sku_?description|product|item|desc|name|category)", c, re.I) for c in df.columns):
                    cands.append(df)
        if not cands:
            return ""
        sm = pd.concat(cands, ignore_index=True, sort=False)
        cols = [c for c in sm.columns if re.search(r"(sku_?description|product|item|desc|name|category)", c, re.I)]
        if not cols:
            return ""
        mask = pd.Series(False, index=sm.index)
        for c in cols:
            mask = mask | sm[c].astype(str).str.contains(q, case=False, na=False)
        hits = sm.loc[mask]
        if hits.empty and "sku_description" in sm.columns:
            sm["_score"] = sm["sku_description"].astype(str).apply(lambda s: fuzz.token_set_ratio(s, q))
            hits = sm.sort_values("_score", ascending=False).head(limit)
        if hits.empty:
            return ""
        keep = (["sku"] if "sku" in hits.columns else []) + [c for c in ["sku_description","product_name","item_name","name","desc","category"] if c in hits.columns]
        hits = hits[keep].drop_duplicates().head(limit)
        lines=[]
        for _, r in hits.iterrows():
            label = next((str(r[c]).strip() for c in ["sku_description","product_name","item_name","name","desc","category"]
                          if c in hits.columns and pd.notna(r.get(c)) and str(r.get(c)).strip()), None)
            if label:
                prefix = f"{r['sku']} – " if "sku" in hits.columns and pd.notna(r.get("sku")) else ""
                lines.append(f"- {prefix}{label}")
        return ("Here’s what I found in the catalogue:\n" + "\n".join(lines)) if lines else ""

# -----------------------------
# Clarity (analytics-mode) tools
# -----------------------------
class AnalyticsTools:
    def __init__(self, dm: DataManager):
        self.dm = dm

    def _pick_sales_table(self) -> Optional[pd.DataFrame]:
        # prefer table names containing 'sales'; else any table with revenue-ish columns
        candidates = []
        for name, df in self.dm.tables.items():
            if not isinstance(df, pd.DataFrame) or df.empty: continue
            has_rev = any(re.search(r"(amount|revenue|sales)", c, re.I) for c in df.columns)
            if "sales" in name and has_rev:
                candidates.insert(0, df)
            elif has_rev:
                candidates.append(df)
        return candidates[0] if candidates else None

    def summarize(self, query: str) -> str:
        df = self._pick_sales_table()
        if df is None:
            return "No sales data found."

        rev_col  = next((c for c in df.columns if re.search(r"(line_?net_?sales|net_?sales|amount|revenue|total_?amount|sales)", c, re.I)), None)
        prod_col = next((c for c in df.columns if re.search(r"(sku_?description|product|item|desc|name)", c, re.I)), None)
        date_col = next((c for c in df.columns if re.search(r"(order_?date|order_?datetime|date|datetime|timestamp|time)", c, re.I)), None)

        if not rev_col:  return "Sales file has no revenue/amount column."
        if not prod_col: return "Sales file has no product description column."

        df = df.copy()
        df[rev_col] = pd.to_numeric(df[rev_col], errors="coerce").fillna(0)

        # Year filter if present
        m = YEAR_PAT.search(query)
        if date_col and m:
            year = int(m.group(1))
            df[date_col] = pd.to_datetime(df[date_col], errors="coerce")
            df = df[df[date_col].dt.year == year]

        grouped = df.groupby(prod_col, dropna=False)[rev_col].sum().sort_values(ascending=False)

        # Top/bottom N detection
        m_top = re.search(r"\btop\s+(\d+)\b", query, re.I)
        m_bot = re.search(r"\bbottom\s+(\d+)\b", query, re.I)
        if m_top:
            n = int(m_top.group(1))
            head = grouped.head(n)
            return "\n".join([f"Top {n} products by revenue:"] + [f"- {p}: ${v:,.2f}" for p, v in head.items()])
        if m_bot:
            n = int(m_bot.group(1))
            tail = grouped.tail(n)
            return "\n".join([f"Bottom {n} products by revenue:"] + [f"- {p}: ${v:,.2f}" for p, v in tail.items()])

        return f"Total revenue: ${grouped.sum():,.2f}"

# -----------------------------
# Unified Assistant (auto persona)
# -----------------------------
class Assistant:
    def __init__(self, dm: DataManager):
        self.dm = dm
        self.cust = CustomerTools(dm)
        self.ana  = AnalyticsTools(dm)

    def answer(self, q: str) -> (str, str):
        q = (q or "").strip()
        if not q:
            return "Say something!", ASSISTANT_NAME_CUSTOMER

        if is_analytics_query(q):
            # Try local analytics first; if weak/empty message, fall back to Clarity persona via LLM
            local = self.ana.summarize(q)
            if local and not local.lower().startswith(("no sales data found", "sales file has no")):
                return local, ASSISTANT_NAME_STAFF

            # Clarity persona LLM fallback
            return call_model([
                {"role":"system","content":(
                    f"You are Clarity, an internal analytics officer at {COMPANY}. "
                    "Use concise, plain text answers. If data specifics are missing, provide a short, actionable explanation of what data is needed."
                )},
                {"role":"user","content": q}
            ]), ASSISTANT_NAME_STAFF

        # Nibbles mode: FAQ -> catalogue -> LLM fallback with CSO tone
        faq = self.cust.faq_lookup(q)
        if faq:
            return faq, ASSISTANT_NAME_CUSTOMER

        cat = self.cust.product_lookup(q)
        if cat:
            return cat, ASSISTANT_NAME_CUSTOMER

        # Nibbles persona LLM fallback with a few in-context examples (best-effort, small sample)
        faq_df  = (self.dm.tables.get("faqs") or self.dm.tables.get("faq") or pd.DataFrame()).head(10)
        prod_df = (self.dm.tables.get("product_inventory") or self.dm.tables.get("sku_master") or pd.DataFrame()).head(10)
        faq_examples  = faq_df.to_dict(orient="records") if not faq_df.empty else []
        prod_examples = prod_df.to_dict(orient="records") if not prod_df.empty else []

        return call_model([
            {"role":"system","content":(
                f"You are Nibbles, a warm and professional Customer Service Officer at {COMPANY}. "
                "Base your answers on the company FAQ and product catalogue if possible. "
                "If nothing is found, keep replies short, accurate, and friendly. "
                "Never mention that you are an AI."
            )},
            {"role":"user","content": f"(FAQ samples) {json.dumps(faq_examples, ensure_ascii=False)}"},
            {"role":"user","content": f"(Product samples) {json.dumps(prod_examples, ensure_ascii=False)}"},
            {"role":"user","content": q}
        ]), ASSISTANT_NAME_CUSTOMER

# -----------------------------
# Flask App + UI
# -----------------------------
app = Flask(__name__)
dm  = DataManager(DATA_DIR)
bot = Assistant(dm)

INDEX_HTML_TPL = Template("""
<!doctype html>
<html>
<head>
  <title>Clarity</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
  :root{ --gold:#d2b48c; --gold-dark:#c19a6b; --bg:#f7f5f2; }
  *{box-sizing:border-box}
  body{background:var(--bg);font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;margin:0}
  .container{max-width:720px;margin:0 auto;padding:20px}
  .widget{background:#fff;border-radius:18px;box-shadow:0 8px 30px rgba(0,0,0,.08);overflow:hidden}
  .header{background:linear-gradient(135deg,var(--gold),#e9c77d);color:#2b2b2b;padding:20px;text-align:center}
  .header h1{margin:0 0 6px;font-size:22px}
  .header p{margin:0;opacity:.85;font-size:13px}
  .chat{height:520px;overflow-y:auto;padding:18px;display:flex;flex-direction:column;gap:12px;background:#fbfaf7}
  .bubble{padding:12px 14px;border-radius:16px;max-width:85%;line-height:1.4;white-space:pre-wrap;position:relative}
  .user{align-self:flex-end;background:var(--gold);color:#1f160d}
  .bot{align-self:flex-start;background:#ffffff;color:#2b2b2b;border:1px solid #eee}
  .badge{font-size:11px;font-weight:600;opacity:.8;margin-bottom:4px}
  .composer{display:flex;padding:14px;border-top:1px solid #eee;background:#fff}
  .input-wrap{flex:1;position:relative}
  textarea{width:100%;border-radius:24px;padding:12px 88px 12px 14px;border:2px solid #eee;resize:none;font-family:inherit;font-size:14px;outline:none}
  textarea:focus{border-color:var(--gold)}
  button{position:absolute;right:8px;top:50%;transform:translateY(-50%);background:var(--gold);color:#1f160d;border:none;padding:8px 16px;border-radius:18px;cursor:pointer;font-size:14px}
  button:hover{background:var(--gold-dark)}
  .typing{color:#666;font-style:italic;align-self:flex-start}
  .hint{font-size:12px;color:#6b6b6b;margin-top:6px}
  a{color:#1b6fa8}
  </style>
</head>
<body>
  <div class="container">
    <div class="widget">
      <div class="header">
        <h1>Clarity</h1>
        <p>Unlocked assistant for ${COMPANY}. It auto-switches personas: analytics → <b>${STAFF}</b>; everything else → <b>${CUSTOMER}</b>.</p>
      </div>
      <div id="chat" class="chat">
        <div class="bubble bot">
          <div class="badge">${STAFF} / ${CUSTOMER}</div>
Hello! Ask me anything.
• Sales/Data examples: "Top 5 products by revenue 2024", "Total revenue Q2 2023".
• Customer help: "Do you have honey walnuts 400g?", "Allergen info for peanuts".
        </div>
        <div class="hint">No prefix needed — I’ll pick the right mode automatically.</div>
      </div>
      <div class="composer">
        <div class="input-wrap">
          <textarea id="msg" rows="1" placeholder="Type your message…" onkeydown="handleEnter(event)"></textarea>
          <button onclick="sendMsg()">Send</button>
        </div>
      </div>
    </div>
  </div>

<script>
function handleEnter(e){ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); sendMsg(); } }
function autoResize(el){ el.style.height='auto'; el.style.height=el.scrollHeight + 'px'; }
document.getElementById('msg').addEventListener('input', function(){ autoResize(this); });

function escapeHtml(str){
  return str.replace(/[&<>'"]/g, function(tag){
    const chars = { '&': '&amp;', '<': '&lt;', '>': '&gt;', "'": '&#39;', '"': '&quot;' };
    return chars[tag] || tag;
  });
}
function linkify(s){
  return s.replace(/(https?:\\/\\/\\S+)/g, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');
}

async function sendMsg(){
  const box=document.getElementById('msg');
  const text=box.value.trim();
  if(!text) return;
  const chat=document.getElementById('chat');
  chat.insertAdjacentHTML('beforeend','<div class="bubble user">'+escapeHtml(text)+'</div>');
  box.value=''; autoResize(box); chat.scrollTop=chat.scrollHeight;

  const typing=document.createElement('div');
  typing.className='typing'; typing.innerText='Assistant is typing…';
  chat.appendChild(typing); chat.scrollTop=chat.scrollHeight;

  let resp = await fetch('/chat', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({message:text})});
  let data = await resp.json();
  chat.removeChild(typing);

  const speaker = escapeHtml(data.speaker || '${STAFF}');
  const reply   = linkify(escapeHtml(data.reply || ''));
  chat.insertAdjacentHTML('beforeend','<div class="bubble bot"><div class="badge">'+speaker+'</div>'+reply+'</div>');
  chat.scrollTop=chat.scrollHeight;
}
</script>
</body>
</html>
""")

@app.route("/")
def index():
    return render_template_string(INDEX_HTML_TPL.safe_substitute(
        COMPANY=COMPANY,
        STAFF=ASSISTANT_NAME_STAFF,
        CUSTOMER=ASSISTANT_NAME_CUSTOMER
    ))

@app.route("/chat", methods=["POST"])
def chat():
    msg = (request.json.get("message") or "").strip()
    if not msg:
        return jsonify({"reply": "Say something!", "speaker": ASSISTANT_NAME_CUSTOMER})
    reply, persona = bot.answer(msg)
    return jsonify({"reply": reply, "speaker": persona})

if __name__ == "__main__":
    print("🚀 Starting server on http://127.0.0.1:5000/  (no prefix needed; auto persona)")
    app.run(host="127.0.0.1", port=5000)
