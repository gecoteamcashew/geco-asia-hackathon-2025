# Clarity.py
# Clarity (staff) – Internal analytics assistant for Cashew4Nuts
# - Loads ALL CSVs in DATA_DIR
# - Auto-detects & combines sales-like tables into one corpus
# - Joins sku_master to show human-readable product names
# - Answers: top/bottom N by period, totals, product trends, quarters/halves, year ranges
# - Falls back to model for non-analytics queries
# - Cerulean UI + /health diagnostics

import os, re, subprocess, sys, logging, json
from pathlib import Path
from string import Template
from typing import Dict, List, Optional, Tuple
from dotenv import load_dotenv, find_dotenv

# -----------------------------
# Logging
# -----------------------------
logging.basicConfig(level=logging.INFO, format="%(message)s")
log = logging.getLogger("clarity")

# -----------------------------
# Dependencies
# -----------------------------
REQUIRED = ["flask", "pandas", "fuzzywuzzy", "python-levenshtein",
            "requests", "openpyxl", "python-dotenv"]
def ensure_deps():
    import importlib
    missing = []
    for pkg in REQUIRED:
        mod = "Levenshtein" if pkg == "python-levenshtein" else pkg
        try:
            importlib.import_module(mod)
        except ImportError:
            missing.append(pkg)
    if missing:
        subprocess.check_call([sys.executable, "-m", "pip", "pip", "install", *missing])
ensure_deps()

import pandas as pd
from flask import Flask, request, jsonify, render_template_string
from fuzzywuzzy import fuzz
import requests

# -----------------------------
# Load env (robust)
# -----------------------------
load_dotenv(find_dotenv(suppress_errors=True), override=False)

def _sanitize_path(p: str) -> str:
    if not p:
        return ""
    p = p.strip().strip('"').strip("'")
    p = os.path.expandvars(p)
    p = os.path.expanduser(p)
    return p

API_URL  = (os.getenv("API_URL") or "").strip()
API_KEY  = (os.getenv("API_KEY") or "").strip()
MODEL    = (os.getenv("MODEL") or "openai/gpt-oss-120b").strip()
_raw_dir = os.getenv("DATA_DIR", r"C:\Team_Cashew_Synthetic_Data")
DATA_DIR = Path(_sanitize_path(_raw_dir))
PORT     = int(os.getenv("CLARITY_PORT", os.getenv("PORT", "5002")))

ASSISTANT_NAME_STAFF = "Clarity"
COMPANY_NAME = "Cashew4Nuts"

log.info(f"[env] DATA_DIR raw='{_raw_dir}' -> resolved='{DATA_DIR}'  exists={DATA_DIR.exists()}")

# -----------------------------
# Brand sanitizer
# -----------------------------
def brand_sanitize(s: str) -> str:
    if not isinstance(s, str):
        return s
    return re.sub(r"camel[\s\u00A0\-]*nuts[’'s]*", COMPANY_NAME, s, flags=re.I)

# -----------------------------
# Data Manager (loads ALL CSVs)
# -----------------------------
class DataManager:
    def __init__(self, data_dir: Path):
        self.dir = Path(data_dir)
        self.tables: Dict[str, pd.DataFrame] = {}
        self._load_all()

    def _safe_csv(self, path: Path) -> pd.DataFrame:
        df = pd.DataFrame()
        for enc in ("utf-8", "utf-8-sig", "latin-1"):
            try:
                df = pd.read_csv(path, encoding=enc, low_memory=False)
                break
            except Exception:
                continue
        if df.empty:
            log.warning(f"[csv] Failed to load {path}")
            return df
        # normalize columns/strings
        df.columns = [str(c).replace("\u00A0", " ").strip().lower() for c in df.columns]
        for c in df.columns:
            if df[c].dtype == object:
                df[c] = df[c].astype(str).str.replace("\u00A0", " ", regex=False).str.strip()
        return df

    def _load_all(self):
        log.info(f"[load] scanning {self.dir} for CSV files…")
        if not self.dir.exists():
            log.error(f"[load] directory not found: {self.dir}")
            return
        count = 0
        for path in self.dir.rglob("*.csv"):
            key = path.stem.lower().replace(" ", "_")
            df = self._safe_csv(path)
            self.tables[key] = df
            count += 1
            log.info(f"[load] {key}: {len(df)} rows, {len(df.columns)} cols")
        log.info(f"[load] total CSVs loaded: {count}")

# -----------------------------
# Model caller (plain text only)
# -----------------------------
def call_model(messages: List[Dict[str, str]], max_tokens=512) -> str:
    if not API_KEY or not API_URL:
        return "API not configured. Please check your .env file."
    try:
        messages = [{"role": "system", "content":
                     "Always answer in plain text only. "
                     "Do not use Markdown, bold, tables, or special formatting."}] + messages
        r = requests.post(
            API_URL,
            headers={"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"},
            json={"model": MODEL, "messages": messages, "max_tokens": max_tokens},
            timeout=30,
        )
        reply = r.json()["choices"][0]["message"]["content"].strip()
        reply = re.sub(r"[*_`#>|]", "", reply)
        return reply
    except Exception as e:
        log.error(f"[api] error: {e}")
        return "Sorry, I couldn’t connect to the assistant API."

# -----------------------------
# Sales corpus builder (multi-table)
# -----------------------------
REV_PAT  = re.compile(r"(net_?sales|gross_?sales|line_?net_?sales|amount|revenue|total_?amount|sales)", re.I)
PROD_PAT = re.compile(r"(sku_?description|product|item|desc|name|sku
