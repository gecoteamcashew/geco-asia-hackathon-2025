# clarity_staff.py
# Clarity (staff) – Internal analytics assistant for Cashew4Nuts
# - Dynamic CSV ingestion
# - Sales summaries with year filter + top/bottom N
# - Joins sku_master to show human-readable product names
# - Falls back to model for non-sales queries
# - Cerulean UI
#
# Env:
#   API_URL, API_KEY, MODEL, DATA_DIR
#   CLARITY_PORT (optional), PORT (fallback)

import os, re, subprocess, sys, logging, json
from pathlib import Path
from string import Template
from typing import Dict, List
from dotenv import load_dotenv

# -----------------------------
# Logging
# -----------------------------
logging.basicConfig(level=logging.INFO, format="%(message)s")
log = logging.getLogger("clarity")

# -----------------------------
# Dependencies
# -----------------------------
REQUIRED = ["flask", "pandas", "fuzzywuzzy", "python-levenshtein",
            "requests", "openpyxl", "python-dotenv"]
def ensure_deps():
    import importlib
    missing = []
    for pkg in REQUIRED:
        mod = "Levenshtein" if pkg == "python-levenshtein" else pkg
        try:
            importlib.import_module(mod)
        except ImportError:
            missing.append(pkg)
    if missing:
        subprocess.check_call([sys.executable, "-m", "pip", "install", *missing])
ensure_deps()

import pandas as pd
from flask import Flask, request, jsonify, render_template_string
from fuzzywuzzy import fuzz  # kept for parity (not used heavily here)
import requests

# -----------------------------
# Load env
# -----------------------------
load_dotenv()

API_URL  = os.getenv("API_URL", "").strip()
API_KEY  = os.getenv("API_KEY", "").strip()
MODEL    = os.getenv("MODEL", "openai/gpt-oss-120b")
DATA_DIR = Path(os.getenv("DATA_DIR", r"C:\Team_Cashew_Synthetic_Data"))
PORT     = int(os.getenv("CLARITY_PORT", os.getenv("PORT", "5002")))

ASSISTANT_NAME_STAFF = "Clarity"
COMPANY_NAME = "Cashew4Nuts"

# -----------------------------
# Brand sanitizer
# -----------------------------
def brand_sanitize(s: str) -> str:
    if not isinstance(s, str):
        return s
    return re.sub(r"camel[\s\u00A0\-]*nuts[’'s]*", COMPANY_NAME, s, flags=re.I)

# -----------------------------
# Data Manager (dynamic CSV loader)
# -----------------------------
class DataManager:
    def __init__(self, data_dir: Path):
        self.dir = Path(data_dir)
        self.tables: Dict[str, pd.DataFrame] = {}
        self._load_all()

    def _safe_csv(self, path: Path) -> pd.DataFrame:
        df = pd.DataFrame()
        for enc in ("utf-8", "utf-8-sig", "latin-1"):
            try:
                df = pd.read_csv(path, encoding=enc)
                break
            except Exception:
                continue
        if df.empty:
            log.warning(f"[csv] Failed to load {path}")
            return df
        # cleanup
        df.columns = [str(c).replace("\u00A0", " ").strip().lower() for c in df.columns]
        for c in df.columns:
            if df[c].dtype == object:
                df[c] = df[c].astype(str).str.replace("\u00A0", " ", regex=False).str.strip()
        return df

    def _load_all(self):
        log.info(f"[load] scanning {self.dir} for CSV files…")
        if not self.dir.exists():
            log.error(f"[load] directory not found: {self.dir}")
            return
        for path in self.dir.rglob("*.csv"):
            key = path.stem.lower().replace(" ", "_")
            df = self._safe_csv(path)
            self.tables[key] = df
            log.info(f"[load] {key}: {len(df)} rows, {len(df.columns)} cols")

# -----------------------------
# API caller (plain text only)
# -----------------------------
def call_model(messages: List[Dict[str, str]], max_tokens=512) -> str:
    if not API_KEY or not API_URL:
        return "API not configured. Please check your .env file."
    try:
        messages = [{"role": "system", "content":
                     "Always answer in plain text only. "
                     "Do not use Markdown, bold, tables, or special formatting."}] + messages

        r = requests.post(
            API_URL,
            headers={"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"},
            json={"model": MODEL, "messages": messages, "max_tokens": max_tokens},
            timeout=20,
        )
        reply = r.json()["choices"][0]["message"]["content"].strip()
        reply = re.sub(r"[*_`#>|]", "", reply)  # strip stray markdown
        return reply
    except Exception as e:
        log.error(f"[api] error: {e}")
        return "Sorry, I couldn’t connect to the assistant API."

# -----------------------------
# Staff Assistant (sales analytics + model fallback)
# - Picks a sales table
# - Detects revenue/product/date cols
# - Year filter
# - Top/Bottom N
# - Joins sku_master for readable names if needed
# -----------------------------
class StaffAnalytics:
    def __init__(self, dm: DataManager):
        self.dm = dm

    # Prefer table with 'sales' in name; then common fallbacks; else auto-detect by revenue-ish column
    def _pick_sales_df(self):
        # 1) Sales in name
        for name, df in self.dm.tables.items():
            if "sales" in name and isinstance(df, pd.DataFrame) and not df.empty:
                return df, name
        # 2) Known fallbacks
        for name in ("ecommerce_purchases", "orders", "transactions"):
            df = self.dm.tables.get(name)
            if isinstance(df, pd.DataFrame) and not df.empty:
                return df, name
        # 3) Auto-detect by revenue-ish column
        rev_pat = re.compile(r"(net_?sales|gross_?sales|line_?net_?sales|amount|revenue|total_?amount|sales)", re.I)
        best = (None, None, 0)
        for name, df in self.dm.tables.items():
            if not isinstance(df, pd.DataFrame) or df.empty:
                continue
            if any(rev_pat.search(c) for c in df.columns):
                if len(df) > best[2]:
                    best = (df, name, len(df))
        return (best[0], best[1]) if best[0] is not None else (None, None)

    def _pick_columns(self, df: pd.DataFrame):
        # revenue
        rev_priority = [
            "line_net_sales_sgd", "net_sales_sgd", "net_sales",
            "sales_amount", "revenue", "total_amount", "amount"
        ]
        rev_col = next((c for c in rev_priority if c in df.columns), None)
        if rev_col is None:
            rev_col = next((c for c in df.columns if re.search(r"(net_?sales|line_?net_?sales|amount|revenue|sales)", c, re.I)), None)

        # product / sku
        prod_priority = ["sku_description", "product_name", "item_name", "desc", "name", "sku"]
        prod_col = next((c for c in prod_priority if c in df.columns), None)
        if prod_col is None:
            prod_col = next((c for c in df.columns if re.search(r"(sku_?description|product|item|desc|name|sku)", c, re.I)), None)

        # date
        date_priority = ["order_date", "order_datetime", "date", "datetime", "timestamp", "time"]
        date_col = next((c for c in date_priority if c in df.columns), None)
        if date_col is None:
            date_col = next((c for c in df.columns if re.search(r"(date|time)", c, re.I)), None)

        log.info(f"[cols] revenue={rev_col}, product={prod_col}, date={date_col}")
        return rev_col, prod_col, date_col

    def _enrich_product_from_sku_master(self, df: pd.DataFrame, prod_col: str):
        # If we already have a readable description, keep it
        if prod_col and prod_col.lower() != "sku":
            return df, prod_col

        sku_master = self.dm.tables.get("sku_master")
        if not isinstance(sku_master, pd.DataFrame) or sku_master.empty:
            return df, prod_col

        # Need an SKU key to join on
        left_key = prod_col if prod_col else "sku"
        if left_key not in df.columns or "sku" not in sku_master.columns:
            return df, prod_col

        # Pick the prettiest description column from sku_master
        desc_col = next((c for c in ("sku_description", "product_name", "item_name") if c in sku_master.columns), None)
        if not desc_col:
            return df, prod_col

        joined = df.merge(sku_master[["sku", desc_col]].drop_duplicates("sku"), on="sku", how="left")
        joined["__product_display__"] = joined[desc_col].fillna(joined[left_key].astype(str))
        return joined, "__product_display__"

    def sales_summary(self, query: str) -> str:
        df, source_name = self._pick_sales_df()
        if df is None or df.empty:
            loaded = ", ".join(sorted(self.dm.tables.keys()))
            return (
                "No sales data found.\n"
                f"Loaded tables: {loaded or '(none)'}\n"
                "Expected a file like 'sales_transactions.csv' or anything with a revenue column."
            )

        rev_col, prod_col, date_col = self._pick_columns(df)
        if not rev_col:
            return "Sales file has no revenue/amount column."
        if not prod_col:
            prod_col = "sku" if "sku" in df.columns else None
        if not prod_col:
            return "Sales file has no product/SKU column."

        work = df.copy()
        work[rev_col] = pd.to_numeric(work[rev_col], errors="coerce").fillna(0)

        # Year filter if present
        m_year = re.search(r"(20\d{2})", query)
        if m_year and date_col:
            year = int(m_year.group(1))
            work[date_col] = pd.to_datetime(work[date_col], errors="coerce")
            work = work[work[date_col].dt.year == year]
            if work.empty:
                return f"No rows found for {year}."

        # Enrich names from sku_master if necessary
        work, prod_col = self._enrich_product_from_sku_master(work, prod_col)

        grouped = (work.groupby(prod_col, dropna=False)[rev_col]
                        .sum()
                        .sort_values(ascending=False))

        # top/bottom N
        m_top = re.search(r"\btop\s+(\d+)\b", query, re.I)
        m_bot = re.search(r"\bbottom\s+(\d+)\b", query, re.I)
        if m_top:
            n = int(m_top.group(1))
            head = grouped.head(n)
            lines = [f"Top {n} products by revenue{f' in {m_year.group(1)}' if m_year else ''}:"]
            lines += [f"- {p}: ${v:,.2f}" for p, v in head.items()]
            return "\n".join(lines)
        if m_bot:
            n = int(m_bot.group(1))
            tail = grouped.tail(n)
            lines = [f"Bottom {n} products by revenue{f' in {m_year.group(1)}' if m_year else ''}:"]
            lines += [f"- {p}: ${v:,.2f}" for p, v in tail.items()]
            return "\n".join(lines)

        return f"Total revenue{f' in {m_year.group(1)}' if m_year else ''}: ${grouped.sum():,.2f}"

    def answer(self, q: str) -> str:
        if "sale" in q.lower() or "revenue" in q.lower():
            return self.sales_summary(q)
        return call_model([
            {"role": "system", "content": (
                "You are Clarity, an internal staff analytics officer at Cashew4Nuts. "
                "Use the CSV data for analysis if possible. "
                "If the query is outside the data scope, answer helpfully but concisely. "
                "Do not use markdown or formatting."
            )},
            {"role": "user", "content": q},
        ])

# -----------------------------
# Flask App + Cerulean UI
# -----------------------------
app = Flask(__name__)

INDEX_HTML_TPL = Template("""
<!doctype html>
<html>
<head>
  <title>${STAFF}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
  :root{ --cerulean:#2a9df4; --cerulean-dark:#1b6fa8; --bg:#f4f9ff; }
  *{box-sizing:border-box}
  body{background:var(--bg);font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;margin:0}
  .container{max-width:720px;margin:0 auto;padding:20px}
  .widget{background:#fff;border-radius:18px;box-shadow:0 8px 30px rgba(0,0,0,.08);overflow:hidden}
  .header{background:linear-gradient(135deg,var(--cerulean),#9fd3ff);color:#0f2840;padding:20px;text-align:center}
  .header h1{margin:0 0 6px;font-size:22px}
  .header p{margin:0;opacity:.85;font-size:13px}
  .chat{height:520px;overflow-y:auto;padding:18px;display:flex;flex-direction:column;gap:12px;background:#f7fbff}
  .bubble{padding:12px 14px;border-radius:16px;max-width:85%;line-height:1.4;white-space:pre-wrap;position:relative}
  .user{align-self:flex-end;background:var(--cerulean);color:#ffffff}
  .bot{align-self:flex-start;background:#ffffff;color:#1e2a36;border:1px solid #e6f0fb}
  .badge{font-size:11px;font-weight:600;opacity:.8;margin-bottom:4px}
  .composer{display:flex;padding:14px;border-top:1px solid #e6f0fb;background:#fff}
  .input-wrap{flex:1;position:relative}
  textarea{width:100%;border-radius:24px;padding:12px 88px 12px 14px;border:2px solid #e6f0fb;resize:none;font-family:inherit;font-size:14px;outline:none}
  textarea:focus{border-color:var(--cerulean)}
  button{position:absolute;right:8px;top:50%;transform:translateY(-50%);background:var(--cerulean);color:#ffffff;border:none;padding:8px 16px;border-radius:18px;cursor:pointer;font-size:14px}
  button:hover{background:var(--cerulean-dark)}
  .typing{color:#516579;font-style:italic;align-self:flex-start}
  .hint{font-size:12px;color:#516579;margin-top:6px}
  </style>
</head>
<body>
  <div class="container">
    <div class="widget">
      <div class="header">
        <h1>${STAFF}</h1>
        <p>${STAFF} provides sales summaries from CSVs for Cashew4Nuts. Try: "Top 5 products by revenue 2024".</p>
      </div>
      <div id="chat" class="chat">
        <div class="bubble bot">
          <div class="badge">${STAFF}</div>
Hello! I’m ${STAFF} from Cashew4Nuts. Ask things like:
• "Top 5 products by revenue 2024"
• "Bottom 3 by revenue 2023"
• "Total revenue 2024"
        </div>
        <div class="hint">Tip: Include a year for precise results. Non-sales questions are answered briefly via the model.</div>
      </div>
      <div class="composer">
        <div class="input-wrap">
          <textarea id="msg" rows="1" placeholder="Type your message…" onkeydown="handleEnter(event)"></textarea>
          <button onclick="sendMsg()">Send</button>
        </div>
      </div>
    </div>
  </div>

<script>
function handleEnter(e){ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); sendMsg(); } }
function autoResize(el){ el.style.height='auto'; el.style.height=el.scrollHeight + 'px'; }
document.getElementById('msg').addEventListener('input', function(){ autoResize(this); });

function escapeHtml(str){
  return str.replace(/[&<>'"]/g, function(tag){
    const chars = { '&': '&amp;', '<': '&lt;', '>': '&gt;', "'": '&#39;', '"': '&quot;' };
    return chars[tag] || tag;
  });
}

async function sendMsg(){
  const box=document.getElementById('msg');
  const text=box.value.trim();
  if(!text) return;
  const chat=document.getElementById('chat');
  chat.insertAdjacentHTML('beforeend','<div class="bubble user">'+escapeHtml(text)+'</div>');
  box.value=''; autoResize(box); chat.scrollTop=chat.scrollHeight;

  const typing=document.createElement('div');
  typing.className='typing'; typing.innerText='Assistant is typing…';
  chat.appendChild(typing); chat.scrollTop=chat.scrollHeight;

  let resp = await fetch('/chat', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({message:text})});
  let data = await resp.json();
  chat.removeChild(typing);

  const speaker = escapeHtml(data.speaker || '${STAFF}');
  const reply   = escapeHtml(data.reply || '');
  chat.insertAdjacentHTML('beforeend','<div class="bubble bot"><div class="badge">'+speaker+'</div>'+reply+'</div>');
  chat.scrollTop=chat.scrollHeight;
}
</script>
</body>
</html>
""")

dm = DataManager(DATA_DIR)
staff = StaffAnalytics(dm)
app = Flask(__name__)

@app.route("/")
def index():
    return render_template_string(INDEX_HTML_TPL.safe_substitute(STAFF=ASSISTANT_NAME_STAFF))

@app.route("/health", methods=["GET"])
def health():
    # quick diagnostics
    return jsonify({
        "ok": True,
        "data_dir": str(DATA_DIR),
        "tables": {name: {"rows": int(df.shape[0]), "cols": int(df.shape[1])} for name, df in dm.tables.items()}
    })

@app.route("/chat", methods=["POST"])
def chat():
    msg = (request.json.get("message") or "").strip()
    if not msg:
        reply = "Say something!"
    else:
        reply = staff.answer(msg)
    reply = brand_sanitize(reply)
    return jsonify({"reply": reply, "speaker": ASSISTANT_NAME_STAFF})

if __name__ == "__main__":
    print(f"🚀 Clarity running at http://127.0.0.1:{PORT}/  (DATA_DIR={DATA_DIR})")
    app.run(host="127.0.0.1", port=PORT)
