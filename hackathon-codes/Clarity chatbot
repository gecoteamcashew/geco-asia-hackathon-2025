# chatbot_app.py
# Clarity: one unlocked assistant with dual persona
# - Data/Sales/Analytics → Clarity tone
# - Everything else → Nibbles tone
#
# Branding: default company is Cashew4Nuts.
# Any occurrence of "Camel Nuts" (any case/spacing/hyphenation) is masked to "Cashew4Nuts".

import os, re, sys, json, uuid, logging, subprocess
from pathlib import Path
from string import Template
from typing import Dict, List, Optional, Tuple

# -----------------------------
# Logging (define BEFORE env uses it)
# -----------------------------
logging.basicConfig(level=logging.INFO, format="%(message)s")
log = logging.getLogger("clarity")

import pandas as pd
from flask import Flask, request, jsonify, render_template_string
from fuzzywuzzy import fuzz
import requests
from dotenv import load_dotenv

# -----------------------------
# Dependencies
# -----------------------------
REQUIRED = ["flask", "pandas", "fuzzywuzzy", "python-levenshtein",
            "requests", "openpyxl", "python-dotenv"]
def ensure_deps():
    import importlib
    missing = []
    for pkg in REQUIRED:
        mod = "Levenshtein" if pkg == "python-levenshtein" else pkg
        try: importlib.import_module(mod)
        except ImportError: missing.append(pkg)
    if missing:
        subprocess.check_call([sys.executable, "-m", "pip", "install", *missing])
ensure_deps()

import pandas as pd
from flask import Flask, request, jsonify, render_template_string
from fuzzywuzzy import fuzz
import requests
from dotenv import load_dotenv

# -----------------------------
# Env  (use bitdeer.env)
# -----------------------------
# You can override via OS env:  BITDEER_ENV=/full/path/to/bitdeer.env
ENV_FILE = os.getenv("BITDEER_ENV", "bitdeer.env")

# try a few sensible locations
env_candidates = [
    Path(ENV_FILE),
    Path(__file__).with_name(ENV_FILE),
    Path.cwd() / ENV_FILE,
]

loaded_env_path = None
for p in env_candidates:
    if p.is_file():
        load_dotenv(dotenv_path=p, override=True)
        loaded_env_path = str(p)
        log.info(f"[env] Loaded {p}")
        break
if not loaded_env_path:
    # Fall back to default .env in CWD (if present) and OS variables
    load_dotenv()
    log.warning(f"[env] {ENV_FILE} not found; using OS env / default .env if present.")

API_URL   = (os.getenv("API_URL") or "").strip()
API_KEY   = (os.getenv("API_KEY") or "").strip()
MODEL     = (os.getenv("MODEL") or "openai/gpt-oss-120b").strip()
_default_dir = Path("/mnt/data") if Path("/mnt/data").exists() else Path(r"C:\Team_Cashew_Synthetic_Data")
DATA_DIR  = Path(os.getenv("DATA_DIR", str(_default_dir)))
COMPANY   = (os.getenv("COMPANY_NAME") or "Cashew4Nuts").strip()

ASSISTANT_NAME_CUSTOMER = "Nibbles"
ASSISTANT_NAME_STAFF    = "Clarity"

# -----------------------------
# Branding sanitizer
# -----------------------------
_CAMEL_RE = re.compile(
    r"\b(camel[\s\-]?nuts|camel\s+nuts|camelnuts)\b", re.I
)
def _sanitize_company(text: str) -> str:
    return _CAMEL_RE.sub(COMPANY, text or "")

# -----------------------------
# Data loading
# -----------------------------
def _safe_read_csv(p: Path) -> Optional[pd.DataFrame]:
    try:
        return pd.read_csv(p, encoding="utf-8", engine="python")
    except Exception:
        try:
            return pd.read_csv(p, encoding="latin-1", engine="python")
        except Exception:
            return None

def _normalize_cols(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df.columns = [str(c).strip().replace("\n"," ").replace("\r"," ") for c in df.columns]
    return df

def load_all_tables(data_dir: Path) -> Dict[str, pd.DataFrame]:
    out: Dict[str, pd.DataFrame] = {}
    if not data_dir or not data_dir.exists():
        return out
    for p in sorted(data_dir.glob("*.csv")):
        df = _safe_read_csv(p)
        if df is None: continue
        df = _normalize_cols(df)
        out[p.stem.lower()] = df
    return out

TABLES = load_all_tables(DATA_DIR)

# -----------------------------
# Analytics corpus build (Clarity)
# -----------------------------
def _pick(df: pd.DataFrame, names: List[str]) -> Optional[str]:
    for n in names:
        if n in df.columns: return n
    # fuzzy fallback
    for n in names:
        for c in df.columns:
            if fuzz.ratio(n.lower(), str(c).lower()) >= 90:
                return c
    return None

def build_sales_corpus(tables: Dict[str, pd.DataFrame]) -> pd.DataFrame:
    big = []
    for name, df in tables.items():
        # seek sales-like tables
        if not any(k in name for k in ("sales","purchases","orders","transactions","invoices")):
            continue
        df = df.copy()
        rev_col = _pick(df, ["Net_Sales","Revenue","Amount","Net_sales","net_sales_sgd","sales_sgd","revenue_sgd"])
        prod_col= _pick(df, ["Product_Name","SKU_Description","Item","Product","Name"])
        sku_col = _pick(df, ["SKU","Sku","Item_Code","Code","Product_Code"])
        date_col= _pick(df, ["Date","Order_Date","Invoice_Date","datetime","date"])
        if rev_col is None: continue
        if prod_col is None and sku_col is None:
            df["product"] = None
        else:
            df["product"] = df[prod_col] if prod_col else df[sku_col]
        df["revenue"] = pd.to_numeric(df[rev_col], errors="coerce")
        if date_col: df["date"] = pd.to_datetime(df[date_col], errors="coerce")
        big.append(df[["product","revenue","date"]].copy())
    if not big:
        return pd.DataFrame(columns=["product","revenue","date"])
    big = pd.concat(big, ignore_index=True)
    return big

SALES_CORPUS = build_sales_corpus(TABLES)

class AnalyticsTools:
    @staticmethod
    def top_bottom(df: pd.DataFrame, year: Optional[int], top_n: int = 5, bottom: bool = False) -> List[Tuple[str, float]]:
        if df is None or df.empty:
            return []
        scope = df.copy()
        if year:
            scope = scope[pd.to_datetime(scope["date"], errors="coerce").dt.year.eq(year)]
        # quick cleanup to avoid None group
        key = scope["product"].astype(str).str.strip()
        key = key.mask(key.eq("") | key.str.lower().isin({"nan","none"}), "(Unspecified product)")
        agg = scope.groupby(key)["revenue"].sum().sort_values(ascending=bottom)
        pairs = list(agg.items())
        return pairs[:top_n]

# -----------------------------
# LLM
# -----------------------------
def invoke_llm(messages: List[Dict[str, str]], model: str, api_url: str, api_key: str, temperature: float = 0.2, max_tokens: int = 512) -> str:
    """
    Thin wrapper over chat.completions HTTP API (Bitdeer/OpenAI-compatible).
    """
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    body = {"model": model, "messages": messages, "temperature": temperature, "max_tokens": max_tokens}
    r = requests.post(api_url, headers=headers, json=body, timeout=60)
    r.raise_for_status()
    j = r.json()
    # OpenAI-compatible payload shape
    return j["choices"][0]["message"]["content"].strip()

SYSTEM_CLARITY = """You are Clarity, the staff-facing analytics assistant for ${COMPANY}.
You answer only staff analytics/insights questions (sales, revenue, profit, etc.) using the pre-computed results handed to you as 'facts'.
If a user asks for product/catalogue or customer-service questions, tell them to use Nibbles (our customer bot).
Be concise and professional.
"""
SYSTEM_NIBBLES = """You are Nibbles, a friendly customer service assistant for ${COMPANY}.
You answer only product & service questions strictly from the CSV-derived 'facts'. 
If a user asks for business analytics (sales, revenue, profit, ROAS, etc.), decline politely and ask them to prefix with "Staff query:" and talk to Clarity.
Mirror the user's language if possible.
"""

def chat_router(user_text: str, facts: Dict[str, str]) -> Tuple[str, str]:
    """
    Route: if it's analytics → Clarity system; else Nibbles system.
    """
    if is_analytics_query(user_text):
        sysmsg = Template(SYSTEM_CLARITY).substitute(COMPANY=COMPANY)
        who = ASSISTANT_NAME_STAFF
    else:
        sysmsg = Template(SYSTEM_NIBBLES).substitute(COMPANY=COMPANY)
        who = ASSISTANT_NAME_CUSTOMER

    msgs = [
        {"role":"system", "content": sysmsg},
        {"role":"system", "content": "Use ONLY the 'facts' JSON as source of truth. If info is missing, say so."},
        {"role":"system", "content": json.dumps(facts, ensure_ascii=False)},
        {"role":"user", "content": user_text},
    ]
    try:
        out = invoke_llm(msgs, MODEL, API_URL, API_KEY)
        return who, out
    except requests.HTTPError as e:
        return who, f"LLM error: {e.response.status_code} - {getattr(e.response,'text','') or e}"
    except Exception as e:
        return who, f"LLM error: {e}"

# -----------------------------
# Minimal product facts
# -----------------------------
CAT_CANDIDATES = {
    "name": ["Product_Name","Name","SKU_Description","Description","Item","Title"],
    "sku":  ["SKU","Sku","Item_Code","Code","Product_Code"],
    "price":["Unit_Price","Price","UnitPrice","Retail_Price","SRP"],
    "stock":["Stock","Qty_Available","Quantity","Available","Inventory"],
    "pack":["Pack_Size","Size","Weight","Pack","Package"],
    "cat":["Category","Type","Class"]
}
def pick(df: pd.DataFrame, cands: List[str]) -> Optional[str]:
    for c in cands:
        if c in df.columns: return c
    for c in cands:
        for col in df.columns:
            if fuzz.ratio(c.lower(), str(col).lower()) >= 90:
                return col
    return None

def build_product_facts(tables: Dict[str, pd.DataFrame], query: str) -> Dict[str, List[Dict[str, str]]]:
    # prefer sku_master-like
    df = None
    for k, v in tables.items():
        if "sku_master" in k or "product" in k:
            df = v; break
    items: List[Dict[str,str]] = []
    if df is not None and not df.empty:
        cols = {k: pick(df, v) for k, v in CAT_CANDIDATES.items()}
        name_c = cols["name"]; cat_c = cols["cat"]; pack_c = cols["pack"]; price_c = cols["price"]; stock_c = cols["stock"]; sku_c = cols["sku"]
        # fuzzy shortlist
        scores = []
        for _, r in df.iterrows():
            t = " | ".join(str(r.get(c,"")) for c in [name_c, cat_c, pack_c] if c)
            s = fuzz.WRatio(query, t)
            scores.append((s, r))
        scores.sort(reverse=True, key=lambda x: x[0])
        for s, r in scores[:8]:
            rec = {}
            if sku_c:   rec["SKU"] = str(r.get(sku_c,"")).strip()
            if name_c:  rec["Product_Name"] = str(r.get(name_c,"")).strip()
            if pack_c:  rec["Pack_Size"] = str(r.get(pack_c,"")).strip()
            if price_c:
                try:
                    val = float(r.get(price_c))
                    rec["Unit_Price"] = f"{val:.2f}"
                except Exception:
                    rec["Unit_Price"] = str(r.get(price_c,"")).strip()
            if stock_c: rec["Stock"] = str(r.get(stock_c,"")).strip()
            items.append(rec)
    return {"catalog_matches": items}

# -----------------------------
# Flask app
# -----------------------------
INDEX_HTML = """
<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>Clarity • ${COMPANY}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <style>
    body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial; background:#0f1115; color:#eaeaea; margin:0; }
    .wrap { max-width: 920px; margin: 0 auto; padding: 24px; }
    .hero { background: linear-gradient(120deg,#f9d29d,#ffdca8); color:#1a1209; padding: 14px 20px; border-radius: 16px; margin-bottom: 16px; }
    .hero h1 { margin: 0; font-size: 22px; }
    .hero p { margin: 6px 0 0 0; font-size: 13px; opacity: .9; }
    .card { background:#171923; border-radius: 16px; padding: 16px; box-shadow: 0 8px 24px rgba(0,0,0,.35); }
    .chat { height: 58vh; overflow-y:auto; background:#101321; border-radius:12px; padding:12px; }
    .bubble { padding: 10px 12px; border-radius: 12px; margin: 6px 0; max-width: 80%; line-height:1.35; }
    .bot { background:#1b2237; border: 1px solid #273352; }
    .me { background:#263046; margin-left:auto; }
    .row { display:flex; gap:10px; align-items:center; }
    .inputbar input, .inputbar button { font-size:16px; padding:10px 12px; border-radius: 10px; border:0; }
    .inputbar input { flex:1; background:#0e1220; color:#eaeaea; outline: 1px solid #293358; }
    .inputbar button { background:#FF7A00; color:#1a1209; font-weight: 800; cursor:pointer; }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="hero">
      <h1>Clarity</h1>
      <p>${COMPANY} internal assistant for analytics. For product questions, use Nibbles.</p>
    </div>

    <div class="card">
      <div id="chat" class="chat"></div>
      <div class="row inputbar" style="margin-top:10px;">
        <input id="msg" placeholder="Try: Staff query: top 5 products by revenue in 2023, or 'Roasted almonds 400g price'"/>
        <button id="send">Send</button>
      </div>
    </div>
  </div>
<script>
const chat = document.getElementById('chat');
const msg = document.getElementById('msg');
const btn = document.getElementById('send');

function add(role, text){
  const b = document.createElement('div');
  b.className = 'bubble ' + (role==='bot'?'bot':'me');
  b.textContent = text;
  chat.appendChild(b);
  chat.scrollTop = chat.scrollHeight;
}
btn.onclick = async () => {
  const t = msg.value.trim();
  if(!t) return;
  add('me', t);
  msg.value = '';
  try {
    const r = await fetch('/chat', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({message:t})});
    const j = await r.json();
    if(j.ok) add('bot', j.speaker + "\\n" + j.answer);
    else add('bot', j.error || 'error');
  } catch(e){ add('bot', 'error: '+e.message); }
};
msg.addEventListener('keydown',(e)=>{ if(e.key==='Enter') btn.click(); });
add('bot', 'Welcome to Clarity (staff analytics) / Nibbles (customer). Prefix staff questions with "Staff query:"');
</script>
</body>
</html>
"""

app = Flask(__name__)

@app.route("/")
def home():
    html = Template(INDEX_HTML).substitute(COMPANY=COMPANY)
    return render_template_string(html)

@app.route("/chat", methods=["POST"])
def chat():
    body = request.get_json(force=True, silent=True) or {}
    user_text = str(body.get("message","")).strip()
    if not user_text:
        return jsonify({"ok": False, "error": "Empty message"}), 400

    # Build facts depending on query type
    if is_analytics_query(user_text) or user_text.lower().startswith("staff query:"):
        # trim the prefix if present
        q = re.sub(r"^staff\s+query:\s*", "", user_text, flags=re.I)
        # simple demo: top 5 revenue by year if a year is present
        m = re.search(r"\b(20\d{2})\b", q)
        yr = int(m.group(1)) if m else None
        pairs = AnalyticsTools.top_bottom(SALES_CORPUS, yr, top_n=5, bottom=False)
        facts = {"top5": [{"product": k, "revenue": round(float(v or 0), 2)} for k, v in pairs]}
    else:
        facts = build_product_facts(TABLES, user_text)

    speaker, out = chat_router(user_text, facts)
    return jsonify({"ok": True, "speaker": speaker, "answer": out})

if __name__ == "__main__":
    log.info(f"[boot] DATA_DIR={DATA_DIR}")
    log.info(f"[boot] Model={MODEL}")
    log.info(f"[boot] API_URL={API_URL}")
    app.run(host="127.0.0.1", port=5000, debug=False)
